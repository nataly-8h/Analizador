import java.util.ArrayList;
import java.util.Arrays;
import java.util.Hashtable;

public class CYK {
	public Analizador analizar;
	public ArrayList<String> genOrder;
	
	public Hashtable<String, ArrayList<String>> CYKgrammar;
	public ArrayList<String> gramOrd;
	public String cadena;
	public int tableSize;
	public String[][] table; //tabla donde se agregan los numeros
	
	
	public CYK(Analizador a, String cadena) {
		this.analizar = a;
		this.genOrder = a.genOrder;
		
		CYKgrammar = a.grammar;
		System.out.println("CYK " + this.CYKgrammar.toString());
		this.cadena = cadena;
		this.tableSize = cadena.length();
		System.out.println(tableSize);
		this.table = new String[this.tableSize][this.tableSize];
		
//		for (int i = 0; i < table.length; i++) {
//			System.out.println(Arrays.toString(this.table[i]));
//		}
		//System.out.println(this.table[0][0] == null);

		int j = 0;
		for (int i = 1; i < table.length; i++) {
			this.table[i][i] = "-";
			while(j <= i) {
				this.table[i][j] = " ";
				j++;
			}
			j = 0;
		}
		
		analizer();
	}
	
	public void analizer() {
		for (int m = 0; m < table.length; m++) {
			String symbol = "";
			for(int i = 0; i < this.genOrder.size(); i++) { //cada generador
				  for (int j = 0; j < this.CYKgrammar.get(this.genOrder.get(i)).size(); j++) { //j para ir a cada elemento de la lista 
					  //String[] expre =  this.CYKgrammar.get(this.genOrder.get(i)).get(j).split(""); // hacer lista de cada elemento de una expresion generada
					  if(this.CYKgrammar.get(this.genOrder.get(i)).get(j).length() == 1) {
						  if(this.cadena.charAt(m) == this.CYKgrammar.get(this.genOrder.get(i)).get(j).charAt(0)) {
							  symbol = symbol + this.genOrder.get(i);
						  }
						  //System.out.println(this.CYKgrammar.get(this.genOrder.get(i)).get(j));
					  }
				  }

			  }
			this.table[m][m] = symbol;
			
		}
		
//		int i = 0;
//		int j = 0;
//		while(this.table[this.tableSize -1][this.tableSize -1] == null) {
//			this.table[i][j] = "A";
//			i ++;
//			j++;
//		}
		for (int k = 0; k < table.length; k++) {
			System.out.println(Arrays.toString(this.table[k]));
		}
		
	}
	
//	public String findGenerators() {
//		String symbol = "";
//		for(int i = 0; i < this.genOrder.size(); i++) { //cada generador
//			  for (int j = 0; j < this.CYKgrammar.get(this.genOrder.get(i)).size(); j++) { //j para ir a cada elemento de la lista 
//				  //String[] expre =  this.CYKgrammar.get(this.genOrder.get(i)).get(j).split(""); // hacer lista de cada elemento de una expresion generada
//				  if(this.CYKgrammar.get(this.genOrder.get(i)).get(j).length() == 1) {
//					  if(this.cadena.charAt(m) == this.CYKgrammar.get(this.genOrder.get(i)).get(j).charAt(0)) {
//						  symbol = symbol + this.genOrder.get(i);
//					  }
//					  //System.out.println(this.CYKgrammar.get(this.genOrder.get(i)).get(j));
//				  }
//			  }
//
//		  }
//		return symbol;
//	}


	public static void main(String[] args) {
		Analizador a = new Analizador("S→AB|SS|AC|BD|BA A→a B→b C→SB D→SA");
		System.out.println(a.grammar.toString());
		String pruebaCadena =  "aabbab";
		CYK b = new CYK(a, pruebaCadena);
		
	}

}
