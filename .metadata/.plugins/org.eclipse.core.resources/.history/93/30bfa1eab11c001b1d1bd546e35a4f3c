import java.util.ArrayList;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Hashtable;

public class Chomsky {
	public String[] gramatica;
	public ArrayList<String> terminals,
							 genOrder;
	//public Hashtable<String, String> generators;

	public Hashtable<String, ArrayList<String>> grammar;
	public Hashtable<String, Nodo> conexiones;

	public Chomsky(String gramatic) {
		int generadores = 0;
		this.gramatica = gramatic.split("");
		
		HashSet<String> orgGenerators = new HashSet<String>();
		//this.generators = new Hashtable<String, String>();
		
		this.terminals = new ArrayList<String>();
		this.genOrder = new ArrayList<String>();

		//obtencion de generadores de la gramatica
		for(int i = 0; i < gramatica.length -1; i++) {
			if(gramatica[i+1].equals("→")) {
				orgGenerators.add(gramatica[i]);
				//this.generators.put(gramatica[i], gramatica[i]);
				this.genOrder.add( gramatica[i]);
			}
		}

		//obtencion de elementos terminales 
		for (int i = 0; i < gramatica.length; i++) {
			//en este if tambien se eliminan los Generadores que no generan nada nada
			if(!gramatica[i].equals("→") && !this.genOrder.contains(gramatica[i]) && !gramatica[i].equals("|") && !gramatica[i].isBlank() && !terminals.contains(gramatica[i]) && !Character.isUpperCase(gramatica[i].charAt(0))) {
				this.terminals.add(gramatica[i]);
			}
		}

		//Acomodo de gramatica en arraylist
		this.grammar = new  Hashtable<String, ArrayList<String>>();
		System.out.println(Arrays.toString(this.gramatica));
		//int generated = -1; // para que comience en 0
		String currentG = "";
		String expression = "";
		int expr = 0; //expresiones de cada gramatica

		for(int i = 0; i < gramatica.length -1; i++) {
			if(gramatica[i+1].equals("→")) {
				this.grammar.put(gramatica[i], new ArrayList<String>());
				currentG = gramatica[i];
			}else {
				if(gramatica[i].contentEquals("|") || gramatica[i].isBlank()) {
					this.grammar.get(currentG).add(expression);
					expression = "";
				}else {
					if(!gramatica[i].equals("→")) {
						expression = expression + gramatica[i];
					}

				}
			}
		}
		expression = expression + gramatica[gramatica.length -1];
		this.grammar.get(currentG).add(expression);
		System.out.println(this.grammar.toString());

		//Pasos para chomsky:
		inutiles();
		conexiones();
		punitarias();
		chomsky(orgGenerators); 

	}


	public void inutiles() {
		ArrayList<String> N1 = new ArrayList<String>(); // N1 = ø
	    ArrayList<String> Ns = new ArrayList<String>(); // ∑

		for (int i = 0; i < this.terminals.size(); i++) {  // agregar los valores de ∑
			Ns.add(this.terminals.get(i));
		}
		int prevSize = 0;
		int currentSize = Ns.size();

		while(currentSize != prevSize) {
			for(int i = 0; i < this.genOrder.size(); i++) { //cada generador
				if(!Ns.contains(this.genOrder.get(i))) {
					for (int j = 0; j < this.grammar.get(this.genOrder.get(i)).size(); j++) { //j para ir a cada elemento de la lista 
						String[] expre =  this.grammar.get(this.genOrder.get(i)).get(j).split(""); // hacer lista de cada elemento de una expresion generada
						String finexpresion = "";
						for (int k = 0; k < expre.length; k++) {
							if(Ns.contains(expre[k])) {
								finexpresion = finexpresion + expre[k];
								if(finexpresion.equals(this.grammar.get(this.genOrder.get(i)).get(j))) { //Si al terminar la expresion es igual a toda la expresion, agregar el generador
									if(!N1.contains(this.genOrder.get(i)) && !Ns.contains(this.genOrder.get(i))) {
										N1.add(this.genOrder.get(i));
									}
								}else {
									if(k == expre.length -1) {
										finexpresion = "";
									}
								}
							}else {
							}
						}
					}
				}else {

				}
			}
			//    System.out.println("N1: " + N1.toString());
			//    System.out.println("Ns: " + Ns.toString());

			prevSize = Ns.size();
			for (int i = 0; i < N1.size(); i++) {
				if(!Ns.contains(N1.get(i))) {
					Ns.add(N1.get(i));
				}  
			}  
			currentSize = Ns.size();
			//    System.out.println("Curr" + currentSize + " Prev" + prevSize);
		}

		//Remover los Generadores inutiles de la gramatica 
		ArrayList<String> eliminados = new ArrayList<String>();
		// System.out.println(this.grammar.toString());
		for (int i = 0; i < this.genOrder.size(); i++) {
			if(!Ns.contains(this.genOrder.get(i))) {
				this.grammar.remove(this.genOrder.get(i));
				eliminados.add(this.genOrder.get(i));
				this.genOrder.remove(i);
			}
		}
		//System.out.println(this.grammar.toString());

		//Remover las expresiones que contienen el generador inutil
		for(int i = 0; i < this.genOrder.size(); i++) { //cada generador
			for (int j = 0; j < this.grammar.get(this.genOrder.get(i)).size(); j++) { //j para ir a cada elemento de la lista 
				String[] expre =  this.grammar.get(this.genOrder.get(i)).get(j).split(""); // hacer lista de cada elemento de una expresion generada
				String finexpresion = "";
				for (int k = 0; k < expre.length; k++) {
					if(eliminados.contains(expre[k])) {
						this.grammar.get(this.genOrder.get(i)).remove(j);
					}
				}
			}
		}

		System.out.println(this.grammar.toString());


	}

	public void conexiones() {
		System.out.println();
		//conexiones
		this.conexiones = new Hashtable<String, Nodo>();
		//Nodo[] this.conexiones = new Nodo[this.genOrder.size()];

		for(int i = 0; i<this.genOrder.size(); i++) {
			if(i==0) {
				this.conexiones.put(this.genOrder.get(i), new Nodo(this.genOrder.get(i), true)); //Agregar a hashtable el nodo
			}else {
				this.conexiones.put(this.genOrder.get(i), new Nodo(this.genOrder.get(i), false)); //Agregar a hashtable el nodo
			}
		}


		for(int i = 0; i < this.genOrder.size(); i++) { //cada generador
			for (int j = 0; j < this.grammar.get(this.genOrder.get(i)).size(); j++) { //j para ir a cada elemento de la lista 
				String[] expre =  this.grammar.get(this.genOrder.get(i)).get(j).split(""); // hacer lista de cada elemento de una expresion generada
				for (int k = 0; k < expre.length; k++) {
					if(this.genOrder.contains(expre[k])) {
						this.conexiones.get(this.genOrder.get(i)).addConexiones(this.conexiones.get(expre[k])); // se agrega el nodo al que etsa conectado en la hashtable
					}
				}
			}

		}


		imprimeConexiones();
		ArrayList<String> alcanzables = DFS();



		//eliminar conexiones a las que no se puede llegar desde el nodo inicial
		String eliminado = "";
		for (int i = 0; i < this.genOrder.size(); i++) {
			if(!alcanzables.contains(this.genOrder.get(i))) {
				eliminado = this.genOrder.get(i);
				this.genOrder.remove(i);
				this.grammar.remove(eliminado);
				this.conexiones.remove(eliminado);
			}
		}

		System.out.println(this.grammar.toString());

	}


	public ArrayList<String> DFS() {
		HashSet<Nodo> visitados = new HashSet<Nodo>();
		ArrayList<String> conectados = new ArrayList<String>();
		visitados.add(this.conexiones.get(this.genOrder.get(0)));//agregar a la visitados el nodo inicial

		for (int i = 0; i < this.conexiones.get(this.genOrder.get(0)).getConexiones().size(); i++) {
			DFS(this.conexiones.get(this.genOrder.get(0)).getConexiones().get(i), visitados);
		}
		for (Nodo nodo : visitados) {
			conectados.add(nodo.valor);

		}
		//System.out.println(conectados.toString());
		return conectados;

	}

	public void DFS(Nodo nodo, HashSet<Nodo> visitados) {
		if(!visitados.contains(nodo)) {
			visitados.add(nodo);

			for(int i = 0; i < nodo.getConexiones().size(); i++) {
				DFS(nodo.getConexiones().get(i), visitados);
			}
		}else {

		}
	}
	
	public void punitarias() { //producciones unitarias

		for (int i = 0; i < this.genOrder.size(); i++) {
			for (int j = 0; j < this.grammar.get(this.genOrder.get(i)).size(); j++) {
				String[] expre =  this.grammar.get(this.genOrder.get(i)).get(j).split(""); // hacer lista de cada elemento de una expresion generada
				if(expre.length == 1 && Character.isUpperCase(expre[0].charAt(0))) { // si solo es uno y es mayuscula
					if(this.grammar.get(expre[0]).size() == 1 && Character.isLowerCase(this.grammar.get(expre[0]).get(0).charAt(0))) {
						System.out.println("produccion unitaria: ");
						this.grammar.get(this.genOrder.get(i)).add(this.grammar.get(expre[0]).get(0));
						System.out.println("se ha removido: " + this.grammar.get(this.genOrder.get(i)).get(j).toString()); 
						this.grammar.get(this.genOrder.get(i)).remove(j);
						
					}
				}
			}
		}
		System.out.println(this.grammar.toString());
		conexiones();
	}
	
	private void chomsky(HashSet<String> orgGenerators) {
		HashSet<String> letras = new HashSet<String>();
		abc(letras, this.genOrder.size());
		
		Hashtable<String, String> newGene = new Hashtable<String, String>(); //para reutilizar generadores K - valor del generador V - llave del generador
		
		for (int i = 0; i < this.genOrder.size(); i++) {
			for (int j = 0; j < this.grammar.get(this.genOrder.get(i)).size(); j++) {
				String[] expre =  this.grammar.get(this.genOrder.get(i)).get(j).split(""); // hacer lista de cada elemento de una expresion generada
				if(expre.length == 1) {
					
				}else {
					for (int k = 0; k < expre.length; k++) {
						if(Character.isLowerCase(expre[k].charAt(0))) {
							if(!newGene.containsKey(expre[k])) {
								String genName = "";
								for (String posible : letras) { //genera una letra para el nuevo generador
									if(!orgGenerators.contains(posible)) {
										genName = posible;
										orgGenerators.add(posible);
									}
								}
								//agregar el generador y cambiarlo en la expresion
								String newExpr = "";
								for (int l = 0; l < expre.length; l++) {
									if(l != k) {
										newExpr = newExpr + expre[l];
									}else {
										newExpr = newExpr + genName;
									}
								}
								//this.grammar.get(this.genOrder.get(i)) = newExpr;
								this.grammar.get(this.genOrder.get(i)).remove(j);
								this.grammar.get(this.genOrder.get(i)).add(newExpr);
								System.out.println(newExpr);
								ArrayList<String> temp = new ArrayList<String>();
								temp.add(expre[k]);
								this.grammar.put(genName, temp);
								System.out.println(this.grammar);
							}
						}
					}
				}

			}
		}
	}
	
	public void abc(HashSet<String> abc, int gNum) {
		if(gNum < 15) { // si la cantidad de generadores es menor a la mitad de las letras en un abecedario
			for (char ch = 'A'; ch <= 'Z'; ++ch) {
				abc.add(String.valueOf(ch));
			}
		}else {
			for (char ch = 'A'; ch <= 'Z'; ++ch) {
				abc.add(String.valueOf(ch));
				abc.add(String.valueOf(ch) + "" + String.valueOf(ch));
			}
		}
		//System.out.println(abc.toString());
	}


	public void imprimeConexiones() {
		//imprimir las conexiones del nodo
		System.out.println("conexiones: " );
		for (int i = 0; i < this.genOrder.size(); i++) {
			System.out.println(this.conexiones.get(this.genOrder.get(i)).nToString());
		}
		System.out.println();
	}

	public static void main(String[] args) {
		String prueba = "S→aS|A|C A→a B→aa C→aCb";
		Chomsky a = new Chomsky(prueba);
	}

}